{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This is my hosted notes for Software Engineering (18IS55) course that I am taking at R V College Of Engineering.[WIP]</p> <p>It's fascinating to see how the complex softwares are built, ever wondered how they are built, digged deep into their documentation, architectue, did it amaze you?, If yes then my friend you are in a real treat, Software Engineering is just not about writing hundereds of lines of source code, it involves</p> <ol> <li>Design</li> <li>Development</li> <li>Testing</li> <li>Deployment</li> <li>Maintainance</li> </ol> <p>Each step requires the preceding step to be done to near perfect [of course, we are humans we cannot always do the things perfectly; software engineering discusses what should we do, what shouldn't we do basically acting like the holy grail for the Software Engineers], then only the steps become easy to work on and maintain. If you look at the list carefully you can see that there are no preceding steps above Design, well ever wondered What is Software Design?</p> <p>Software Design is a broad category that involves from requirement specification, to Integration and Testing.</p>  <p>The most difficult step ever is the first step. It comes with doubts, uncertainties, and all sort of fears. - Martin Luther King Jr.</p>  <p>well this quote also applys to us ryt :P</p> <p>I'll try to put all of my notes, insights, textbook excerpts, article excerpts, youtube video links, Conference Talk excerpts, architectue pictures (self drawn/ borrowed ) etc..  basically making this a complete compilation on Proffessional Software Development.</p>"},{"location":"#reference-book","title":"Reference Book","text":"<ul> <li>Ian Sommerville,\u201c Software Engineering\u201d, 10th Edition, Pearson Education.</li> </ul> <p>If you find any disperencies or any false information you can correct it and submit it as a Pull Request to the repositry.</p>"},{"location":"copyright/","title":"Copyright","text":"<p>All the content and images under the syllabus are not subject to copyright, anyone is free to use the content and image in any way except for harmful activities, intending to use for harmful activities may be bought to notice under proper authorities.</p> <p>The excerpts from various sources are subject to respective individual copyright. [mentioned at the end of each page].</p>  <p>\u2018Learning is unifying seemingly divergent ideas and data.\u2019 \u2013Terry Heick </p>"},{"location":"course-intro/","title":"Course Introduction","text":"<p>Welcome to the course introduction, we'll try to go through the course syllabus and other out of course syllabus [some pratical knowledge] this notes may discuss about.</p> <p>This notes will discuss most of the topics mentioned on the syllabus copy and also will discuss the case studies of other softwares, discuss about system designing [Noobs hand in trying to design systems and implementing them], I intend to keep writing on this notes even after I finish the course.</p> <p>without any further ado let's dive into the syllabus:</p>"},{"location":"course-intro/#syllabus","title":"Syllabus","text":"<ul> <li>Chapter 1: Introduction:<ul> <li>Professional Software Development: Software Engineering Ethics, Case studies.</li> <li>Software Processes: Models, Process activities, Coping with Change, Process improvement. The Rational Unified Process. Computer Aided Software Engineering. </li> <li>Agile Software Development: Introduction to agile methods, Agile development techniques, Agile project management and scaling agile methods. </li> </ul> </li> <li>Chapter 2: Requirement Engineering and Sysem Modelling: <ul> <li>Software Requirements: Functional and Non-functional requirements. Requirements Elicitation,Specification, Validation and Change.</li> <li>System Modeling: Context models, Interaction models,Structural models, Behavioural models, Model driven architecture.</li> <li>Architectural Design: Design decisions, Architectural views, Architectural patterns and architectures. </li> </ul> </li> <li>Chapter 3: Development and Testing &amp; Software Evolution:<ul> <li>Design and Implementation: Object oriented design using UML, Design patterns, Implementation issues, Open-source development.</li> <li>Software Testing: Development testing, Test-driven development,Release testing, User testing.</li> <li>Software Evolution: Evolution processes. Legacy system evolution, Software maintenance.</li> </ul> </li> <li>Chapter 4: Advanced Software Engineering:<ul> <li>Dependable systems:Dependability properties, Sociotechnical systems, dependable processes, formal methods and dependability, </li> <li>Reliability engineering: Availability and reliability, reliability requirements, Reliability measurements, Component based software engineering: Components and component models      , CBSE processes, component composition.</li> </ul> </li> <li>Chapter 5: Software Management:<ul> <li>Project Management:  Risk Management, Managing People, Teamwork, Project Planning: Software Pricing, Plan driven development, Project Scheduling, Agile planning,      Estimation Techniques,COCOMO cost modeling.</li> </ul> </li> </ul>"},{"location":"chapter_1/professional_software_development/","title":"Professional Software Development","text":""},{"location":"chapter_1/professional_software_development/#introduction","title":"Introduction","text":""},{"location":"chapter_1/professional_software_development/#software-engineering-ethics","title":"Software Engineering Ethics","text":""},{"location":"chapter_1/professional_software_development/#case-studies","title":"Case Studies","text":""}]}